{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "LFE",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#comment_block"
		},
		{
			"include": "#quoted-sexp"
		},
		{
			"include": "#sexp"
		},
		{
			"include": "#keyfn"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#strings"
		}
	],
	"repository": {
		"comment": {
			"patterns": [{
				"name": "comment.line.lfe",
				"match": "(;).*$\n?"
			}]
		},
		"comment_block": {
			"name": "comment.block.lfe",
			"begin": "\\#\\|",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.lfe"
				}
			},
			"end": "\\|\\#"
			},
		"constants": {
			"patterns": [
				{
					"name": "constant.numeric.lfe",
					"match": "\\b((0(x|X)[0-9a-fA-F]*)|true|false|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b"
				},
				{
					"match": "(#[bB][\\+\\-]?[0-1]+)",
					"name": "constant.numeric.binary.lfe"
				},
				{
					"match": "(#[oO][\\+\\-]?[0-7]+)",
					"name": "constant.numeric.octal.lfe"
				},
				{
					"match": "(#[dD][\\+\\-]?[0-9]+)",
					"name": "constant.numeric.decimal.lfe"
				},
				{
					"match": "(#[xX][\\+\\-]?[0-9a-fA-F]+)",
					"name": "constant.numeric.hexadecimal.lfe"
				},
				{
					"match": "(#0*([0-9]|[1,2][0-9]|3[0-6])[rR][\\+\\-]?[0-9a-fA-F]*)",
					"name": "constant.numeric.arbitrary-radix.lfe"
				},
				{
					"include": "#atoms"
				}
			]

		},
		"atoms": {
			"match": "(?<=(\\s|\\(|\\[|\\{))'[\\w\\.\\-\\_\\:\\+\\=\\>\\<\\/\\!\\?\\*]+(?=(\\s|\\)|\\]|\\}|\\,))",
			"name": "constant.numeric.atom.lfe"
		},
		"keyfn": {
			"patterns": [
				{
					"comment": "Special forms",
					"match": "(?<=(\\s|\\(|\\[|\\{))\\s*(!|:|defmodule|defmacro|defsyntax|defrecord|defun|export|import|use|require|from|rename|behaviour)(?=(\\s|\\)|\\]|\\}))",
					"name": "keyword.control.lfe"
				},
				{
					"comment": "Control forms",
					"match": "(?<=(\\s|\\(|\\[|\\{))\\s*(if(-[-\\p{Ll}\\?]*)?|when(-[-\\p{Ll}]*)?|for(-[-\\p{Ll}]*)?|cond|andalso|orelse|progn|prog1|prog2|let|let\\*|flet|flet\\*|fletrec|macrolet|syntaxlet|if|case|receive|when|after|try|catch(-[-\\p{Ll}\\?]*)?|binding|loop|recur|fn|throw[\\p{Ll}\\-]*|try|catch|finally|([\\p{Ll}]*case))(?=(\\s|\\)|\\]|\\}))",
					"name": "storage.control.lfe"
				},
				{
					"comment": "Basic operators",
					"match": "(?<=(\\s|\\(|\\[|\\{))\\s*(\\+|\\-|\\*|\\/|<|>|>=|=<|==|/=|=:=|=/=|and|or)(?=(\\s|\\)|\\]|\\}))",
					"name": "entity.name.class"
				},
				{
					"comment": "Supported forms",
					"match": "(?<=(\\s|\\(|\\[|\\{))\\s*(quote|cons|car|cdr|list|tuple|tref|tset|binary|map|map-get|lambda|match-lambda|function|abs|funcall|list\\*|eval-when-compile|fletrec|spawn|apply|gief|match-lambda|is_atom|is_number|is_integer|is_float|is_list|is_map)(?=(\\s|\\)|\\]|\\}))",
					"name": "variable.other.lfe"
				}
			]
		},
		"dynamic-variables": {
			"match": "\\*[\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\d]+\\*",
			"name": "meta.symbol.dynamic.clojure"
		},
		"quoted-sexp": {
			"begin": "(['``][\\(|\\[])\\s*",
			"beginCaptures": {
				"1": {
					"name": "punctuation.section.expression.begin.lfe"
				}
			},
			"end": "(\\))$|(\\)(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.expression.end.trailing.lfe"
				},
				"2": {
					"name": "punctuation.section.expression.end.trailing.lfe"
				},
				"3": {
					"name": "punctuation.section.expression.end.lfe"
				}
			},
			"name": "meta.quoted-expression.lfe",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},



		"sexp": {
			"begin": "([\\(|\\[])\\s*",
			"beginCaptures": {
				"1": {
					"name": "punctuation.section.expression.begin.lfe"
				}
			},
			"end": "(\\))$|(\\)(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.expression.end.trailing.lfe"
				},
				"2": {
					"name": "punctuation.section.expression.end.trailing.lfe"
				},
				"3": {
					"name": "punctuation.section.expression.end.lfe"
				}
			},
			"name": "meta.expression.lfe",
			"patterns": [
				{
					"begin": "(?<=[\\(|\\[]\\s*)(declare|\\s*defun[\\w\\d._:+=><!?*-]*|[\\w._:+=><!?*-][\\w\\d._:+=><!?*-]*/[\\w\\d._:+=><!?*-]*)\\s+",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.lfe"
						}
					},
					"end": "(?=[\\(|\\[])",
					"name": "meta.definition.global.lfe",
					"patterns": [
						{
							"include": "#dynamic-variables"
						},
						{
							"match": "([\\p{L}\\.\\-\\_\\+\\=\\>\\<\\!\\?\\*][\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*\\d]*)",
							"name": "entity.global.lfe"
						},
						{
							"include": "$self"
						}
					]
				},
				{
					"include": "#keyfn"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#sexp"
				},
				{
					"match": "(?<=[\\(|\\[])\\s*([^\"]+?)(?=\\s|[\\)|\\]])",
					"captures": {
						"1": {
							"name": "entity.name.function.lfe"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"include": "$self"
				}
			]
		},



		"strings": {
			"begin": "(?<!\\\\)(\")",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.string.begin.lfe"
				}
			},
			"end": "(\")",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.lfe"
				}
			},
			"name": "string.quoted.double.lfe",
			"patterns": [
				{
					"match": "\\\\.",
					"name": "constant.character.escape.lfe"
				}
			]
		}
	},
	"scopeName": "source.lfe"
}