{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "LFE",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#comment_block"
		},
		{
			"include": "#quoted-sexp"
		},
		{
			"include": "#sexp"
		},
		{
			"include": "#keyfn"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#strings"
		}
	],
	"repository": {
		"comment": {
			"patterns": [{
				"name": "comment.line.lfe",
				"match": "(;).*$\n?"
			}]
		},
		"comment_block": {
			"name": "comment.block.lfe",
			"begin": "\\#\\|",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.lfe"
				}
			},
			"end": "\\|\\#"
			},
		"constants": {
			"patterns": [
				{
					"name": "constant.numeric.lfe",
					"match": "\\b((0(x|X)[0-9a-fA-F]*)|true|false|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b"
				},
				{
					"match": "(#[bB][\\+\\-]?[0-1]+)",
					"name": "constant.numeric.binary.lfe"
				},
				{
					"match": "(#[oO][\\+\\-]?[0-7]+)",
					"name": "constant.numeric.octal.lfe"
				},
				{
					"match": "(#[dD][\\+\\-]?[0-9]+)",
					"name": "constant.numeric.decimal.lfe"
				},
				{
					"match": "(#[xX][\\+\\-]?[0-9a-fA-F]+)",
					"name": "constant.numeric.hexadecimal.lfe"
				},
				{
					"match": "(#0*([0-9]|[1,2][0-9]|3[0-6])[rR][\\+\\-]?[0-9a-fA-F]*)",
					"name": "constant.numeric.arbitrary-radix.lfe"
				},
				{
					"include": "#atoms"
				}
			]

		},
		"atoms": {
			"match": "(?<=(\\s|\\(|\\[|\\{))'[\\w\\.\\-\\_\\:\\+\\=\\>\\<\\/\\!\\?\\*]+(?=(\\s|\\)|\\]|\\}|\\,))",
			"name": "constant.numeric.atom.lfe"
		},
		"keyfn": {
			"patterns": [
				{
					"comment": "Special forms",
					"match": "(?<=(\\s|\\(|\\[|\\{))\\s*(!|:|defmodule|defmacro|defsyntax|macrolet|syntaxlet|defrecord|defun|export|import|use|require|from|rename|behaviour|define|define-syntax|let-syntax|define-record)(?=(\\s|\\)|\\]|\\}))",
					"name": "keyword.control.lfe"
				},
				{
					"comment": "Control forms",
					"match": "(?<=(\\s|\\(|\\[|\\{))\\s*(if(-[-\\p{Ll}\\?]*)?|when(-[-\\p{Ll}]*)?|set|let|let\\*|flet|flet\\*|fletrec|macrolet|syntaxlet|function|fun|let-function|letrec-function|let-macro|if|cond|else|case|receive|when|after|try|catch(-[-\\p{Ll}\\?]*)?|binding|fn|throw[\\p{Ll}\\-]*|try|catch|finally|([\\p{Ll}]*case))(?=(\\s|\\)|\\]|\\}))",
					"name": "storage.control.lfe"
				},
				{
					"comment": "Basic operators",
					"match": "(?<=(\\s|\\(|\\[|\\{))\\s*(\\+|\\-|\\*|\\/|<|>|>=|=<|==|/=|=:=|=/=|and|or|not)(?=(\\s|\\)|\\]|\\}))",
					"name": "entity.name.class"
				},
				{
					"comment": "Supported forms",
					"match": "(?<=(\\s|\\(|\\[|\\{))\\s*(quote|cons|car|cdr|list|tuple|progn|prog1|prog2|begin|tref|tset|binary|map|map-get|lambda|match-lambda|function|abs|funcall|call|list\\*|eval-when-compile|spawn|apply|gief|match-lambda|andalso|orelse|lc|list-comp|bc|binary-comp|match-spec)(?=(\\s|\\)|\\]|\\}))",
					"name": "variable.other.lfe"
				},
				{
					"comment": "Erlang module forms",
					"match": "(?<=(\\s|\\(|\\[|\\{))\\s*(\\-\\-|\\+\\+|abs|adler32|adler32|adler32_combine|alloc_info|alloc_sizes|and|append|append_element|apply|apply|atom_to_binary|atom_to_list|band|binary_part|binary_part|binary_to_atom|binary_to_existing_atom|binary_to_float|binary_to_integer|binary_to_integer|binary_to_list|binary_to_list|binary_to_term|binary_to_term|bit_size|bitsize|bitstring_to_list|bnot|bor|bsl|bsr|bump_reductions|bxor|byte_size|call_on_load_function|cancel_timer|cancel_timer|ceil|check_old_code|check_process_code|check_process_code|convert_time_unit|crasher|crc32|crc32|crc32_combine|date|decode_packet|delay_trap|delete_element|delete_module|demonitor|demonitor|disconnect_node|display|display_nl|display_string|dist_ctrl_get_data|dist_ctrl_get_data_notificat|dist_ctrl_get_opt|dist_ctrl_input_handler|dist_ctrl_put_data|dist_ctrl_set_opt|dist_get_stat|div|dmonitor_node|dt_append_vm_tag_data|dt_get_tag|dt_get_tag_data|dt_prepend_vm_tag_data|dt_put_tag|dt_restore_tag|dt_spread_tag|element|erase|erase|error|error|exit|exit|exit_signal|external_size|external_size|finish_after_on_load|finish_loading|float|float_to_binary|float_to_binary|float_to_list|float_to_list|floor|format_cpu_topology|fun_info|fun_info|fun_info_mfa|fun_to_list|function_exported|garbage_collect|garbage_collect|garbage_collect|garbage_collect_message_area|gather_gc_info_result|get|get|get_cookie|get_keys|get_keys|get_module_info|get_module_info|get_stacktrace|group_leader|group_leader|halt|halt|halt|has_prepared_code_on_load|hd|hibernate|insert_element|integer_to_binary|integer_to_binary|integer_to_list|integer_to_list|iolist_size|iolist_to_binary|iolist_to_iovec|is_alive|is_atom|is_binary|is_bitstring|is_boolean|is_builtin|is_float|is_function|is_function|is_integer|is_list|is_map|is_map_key|is_number|is_pid|is_port|is_process_alive|is_record|is_record|is_reference|is_tuple|length|link|list_to_atom|list_to_binary|list_to_bitstring|list_to_existing_atom|list_to_float|list_to_integer|list_to_integer|list_to_pid|list_to_port|list_to_ref|list_to_tuple|load_module|load_nif|loaded|localtime|localtime_to_universaltime|localtime_to_universaltime|make_fun|make_ref|make_tuple|make_tuple|map_get|map_size|match_spec_test|max|md5|md5_final|md5_init|md5_update|memory|memory|min|module_info|module_info|module_loaded|monitor|monitor_node|monitor_node|monotonic_time|monotonic_time|nif_error|nif_error|node|node|nodes|nodes|not|now|open_port|or|phash|phash2|phash2|pid_to_list|port_call|port_call|port_close|port_command|port_command|port_connect|port_control|port_get_data|port_info|port_info|port_set_data|port_to_list|ports|posixtime_to_universaltime|pre_loaded|prepare_loading|process_display|process_flag|process_flag|process_info|process_info|processes|purge_module|put|raise|read_timer|read_timer|ref_to_list|register|registered|rem|resume_process|round|self|send|send|send_after|send_after|send_nosuspend|send_nosuspend|seq_trace|seq_trace_info|seq_trace_print|seq_trace_print|set_cookie|set_cpu_topology|setelement|setnode|setnode|size|spawn|spawn|spawn|spawn|spawn_link|spawn_link|spawn_link|spawn_link|spawn_monitor|spawn_monitor|spawn_opt|spawn_opt|spawn_opt|spawn_opt|spawn_opt|split_binary|start_timer|start_timer|statistics|subtract|suspend_process|suspend_process|system_flag|system_info|system_monitor|system_monitor|system_monitor|system_profile|system_profile|system_time|system_time|term_to_binary|term_to_binary|throw|time|time_offset|time_offset|timestamp|tl|trace|trace_delivered|trace_info|trace_pattern|trace_pattern|trunc|tuple_size|tuple_to_list|unique_integer|unique_integer|universaltime|universaltime_to_localtime|universaltime_to_posixtime|unlink|unregister|whereis|xor|yield)(?=(\\s|\\)|\\]|\\}))",
					"name": "variable.other.lfe"
				}
			]
		},
		"dynamic-variables": {
			"match": "\\*[\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\d]+\\*",
			"name": "meta.symbol.dynamic.lfe"
		},
		"quoted-sexp": {
			"begin": "(['``][\\(|\\[])\\s*",
			"beginCaptures": {
				"1": {
					"name": "punctuation.section.expression.begin.lfe"
				}
			},
			"end": "(\\))$|(\\)(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.expression.end.trailing.lfe"
				},
				"2": {
					"name": "punctuation.section.expression.end.trailing.lfe"
				},
				"3": {
					"name": "punctuation.section.expression.end.lfe"
				}
			},
			"name": "meta.quoted-expression.lfe",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},



		"sexp": {
			"begin": "([\\(|\\[])\\s*",
			"beginCaptures": {
				"1": {
					"name": "punctuation.section.expression.begin.lfe"
				}
			},
			"end": "(\\))$|(\\)(?=[\\}\\]\\)\\s]*(?:;|$)))|(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.expression.end.trailing.lfe"
				},
				"2": {
					"name": "punctuation.section.expression.end.trailing.lfe"
				},
				"3": {
					"name": "punctuation.section.expression.end.lfe"
				}
			},
			"name": "meta.expression.lfe",
			"patterns": [
				{
					"begin": "(?<=[\\(|\\[]\\s*)(declare|\\s*defun[\\w\\d._:+=><!?*-]*|[\\w._:+=><!?*-][\\w\\d._:+=><!?*-]*/[\\w\\d._:+=><!?*-]*)\\s+",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.lfe"
						}
					},
					"end": "(?=[\\(|\\[])",
					"name": "meta.definition.global.lfe",
					"patterns": [
						{
							"include": "#dynamic-variables"
						},
						{
							"match": "([\\p{L}\\.\\-\\_\\+\\=\\>\\<\\!\\?\\*][\\w\\.\\-\\_\\:\\+\\=\\>\\<\\!\\?\\*\\d]*)",
							"name": "entity.global.lfe"
						},
						{
							"include": "$self"
						}
					]
				},
				{
					"include": "#keyfn"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#sexp"
				},
				{
					"match": "(?<=[\\(|\\[])\\s*([^\"]+?)(?=\\s|[\\)|\\]])",
					"captures": {
						"1": {
							"name": "entity.name.function.lfe"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"include": "$self"
				}
			]
		},



		"strings": {
			"begin": "(?<!\\\\)(\")",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.string.begin.lfe"
				}
			},
			"end": "(\")",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.lfe"
				}
			},
			"name": "string.quoted.double.lfe",
			"patterns": [
				{
					"match": "\\\\.",
					"name": "constant.character.escape.lfe"
				}
			]
		}
	},
	"scopeName": "source.lfe"
}